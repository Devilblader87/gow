name: Build KDE Dev Container (Manual)

on:
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        type: boolean
        default: true
      image_tag:
        description: 'Image tag'
        type: string
        default: 'enhanced'
      use_existing_base:
        description: 'Use existing base images (skip rebuilding base/base-app)'
        type: boolean
        default: true
      base_app_image:
        description: 'Base app image to use (if using existing)'
        type: string
        default: 'ghcr.io/games-on-whales/base-app:edge'
      no_cache:
        description: 'Build without cache (forces fresh build)'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: gow/kde-dev

jobs:
  build-base-images:
    if: ${{ inputs.use_existing_base != true }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      base-image: ${{ steps.base-tag.outputs.image }}
      base-app-image: ${{ steps.base-app-tag.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set repository owner lowercase
        id: repo-owner
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        id: base-tag
        uses: docker/build-push-action@v5
        with:
          context: ./images/base/build
          platforms: linux/amd64
          push: true
          no-cache: ${{ inputs.no_cache }}
          tags: ${{ env.REGISTRY }}/${{ steps.repo-owner.outputs.owner }}/gow/base:${{ inputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push base-app image
        id: base-app-tag
        uses: docker/build-push-action@v5
        with:
          context: ./images/base-app/build
          platforms: linux/amd64
          push: true
          no-cache: ${{ inputs.no_cache }}
          tags: ${{ env.REGISTRY }}/${{ steps.repo-owner.outputs.owner }}/gow/base-app:${{ inputs.image_tag }}
          build-args: |
            BASE_IMAGE=${{ steps.base-tag.outputs.image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-kde-dev:
    needs: [build-base-images]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set repository owner lowercase
        id: repo-owner
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Determine base app image
        id: base-app-image
        run: |
          if [ "${{ inputs.use_existing_base }}" = "true" ]; then
            echo "image=${{ inputs.base_app_image }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ needs.build-base-images.outputs.base-app-image }}" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push KDE Dev image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/kde-dev/build
          platforms: linux/amd64
          push: ${{ inputs.push_to_registry }}
          no-cache: ${{ inputs.no_cache }}
          tags: |
            ${{ env.REGISTRY }}/${{ steps.repo-owner.outputs.owner }}/${{ env.IMAGE_NAME_PREFIX }}:${{ inputs.image_tag }}
            ${{ env.REGISTRY }}/${{ steps.repo-owner.outputs.owner }}/${{ env.IMAGE_NAME_PREFIX }}:edge
          build-args: |
            BASE_APP_IMAGE=${{ steps.base-app-image.outputs.image }}
            IMAGE_SOURCE=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "## KDE Development Container Build Complete! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Built Image:** \`${{ env.REGISTRY }}/${{ steps.repo-owner.outputs.owner }}/${{ env.IMAGE_NAME_PREFIX }}:${{ inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Features:**" >> $GITHUB_STEP_SUMMARY
          echo "- KDE Plasma Desktop Environment" >> $GITHUB_STEP_SUMMARY
          echo "- Integrated App Store (KDE Discover + Flatpak)" >> $GITHUB_STEP_SUMMARY
          echo "- KWallet credential management" >> $GITHUB_STEP_SUMMARY
          echo "- VS Code, Chrome, development tools" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-installed: Blender, Filezilla, Unity Hub" >> $GITHUB_STEP_SUMMARY
          echo "- Full sudo access for package installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Usage:** Add this image to your Wolf config.toml to use the KDE development desktop!" >> $GITHUB_STEP_SUMMARY
# KDE Workflow
